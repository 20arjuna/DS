// The ListUtil class is the driver class for LinkedList operations
// such as adding and removing nodes and reversing the LinkedList
//
// @author Arjun Akkiraju
// @version 9.26.18
public ListUtil
{
  // Returns the size of the linked list
  // @param list  The linked list
  // @return      the size of the linked list
  public size (list)
  {
    if(list.getNext() == null)
    {
      return 0;
    }
    return 1 + this.size(list.getNext());
  }
  // Creates a list with a given number of nodes, each with the
  // same value.
  //
  // @param num   The number of nodes in the linked list
  // @param val   The value of each the linked list nodes
  public makeList(num, val)
  {
    if(num == 0)
    {
      list.setNext(null);
    }
    this.makeList(num-1, val);
  }

  // Gets the value of the linked list at a certain node
  // @param list      The linked list
  // @param index     The index of the node whose value is returned
  // @return          The value of the node at the given index
  public get(list, index)
  {
    if (index == 0)
    {
      return list.getValue();
    }
    return this.get(list.getNext(), index - 1);
  }
  // Adds a node to the end of the linked list.
  // @param list      The linked list
  // @param val       The value of the node being added.
  // @return          The updated linked list.
  public add(list, val)
  {
    if (list == null)
    {
      return newListNode(val, null);
    }
    list.setNext(this.add(list.getNext(), val));
    return list;
  }
  // Removes all nodes with a certain value from the linked list.
  // @param list      The linked list
  // @param value     The value of the nodes which are to be removed.
  // @return null     If the list is empty
  public remove(list, val)
  {
    if (list == null)
    {
      return null;
    }
    //base case
    if(list.getNext().getValue() == val)
    {
      list.setNext(list.getNext().getNext());
    }
    if(list.getNext().getNext() == null)
    {
      list.setNext(num);
    }
    else
    {
      list.removeLast(list.getNext());
    }
  }
  // Returns whether or not the list contains a node with a given value.
  // @param list      The linked list
  // @param value     The value of the node being checked
  // @return          true if the linked list contains a node with the specified value; otherwise,
                      false
  private contains(list, val)
  {
    if(list == null)
    {
      return false;
    }
    if(list.getValue() == val)
    {
      return true;
    }
    if(list.getNext() == null)
    {
      return false;
    }
    return this.contains(list.getNext(), val);
  }
  // Reverses the linked list.
  // @param list      The linked list
  // @return          The reversed linked list.
  public reverse(list)
  {
    currentVal = list.getValue();
    currentNext = list.getNext();
    if(this.size(list) == 1)
    {
      return list;
    }
    return this.reverse(this.removeLast(list)).add(currentVal, currentNext);
  }
}
