// The FancyCalc class uses recursion to perform advanced arithmetic operations
// on integer numbers, such as square and square root.
//
// @author Arjun Akkiraju
// @version 9.13.18
public class FancyCalc
{
  // Computes the result of a number raised to the power of another number
  // @param base     The number which is the base of the power operation
  // @param exponent The number which the base is being raised to
  // @return the base raised to the power of the exponent
  public pow(base, exponent)
  {
    if (exponent == 0)
    {
      return 1;
    }
    return base * this.pow(base, exponent - 1);
  }
  // Computes the square of a given number
  // @param num   the number being squared
  // @return the square of the given number
  public square(num)
  {
    return num * num;
  }
  // Computes the power of a number raised to another number more efficiently
  // than the previous power method.
  // @param base     The number which is the base of the power operation
  // @param exponent The number which the base is being raised to
  // @return the base raised to the power of the exponent
  public fastPow(base, exponent)
  {
    if (exponent == 0)
    {
      return 1;
    }
    if (exponent %2 ==0)
    {
      return this.square(
                  this.fastPow(base, (exponent /2)));
    }
    return base * this.fastPow(base, exponent - 1);
  }
  // Computes the greatest common denominator of two given numbers.
  // If the numbers are not both positive integers, the method will
  // return a string asking for positive numbers.
  // @param num1    The first number
  // @param num2    The second numbers
  // @precondition  Both num1 and num2 are positive integers
  // @return the greatest common denominator of the two parameters
  public gcd(num1, num2)
  {
    if(num1 <0 || num2 <0)
    {
      return "positive nums only please";
    }
    if(this.isBigger(num1, num2))
    {
      big = num1;
      small = num2;
      }
      else if(this.isBigger(num2, num1))
      {
        big = num2;
        small = num1;
      }
      else
      {
        return num1;
      }
      if(small ==0)
      {
        return big;
      }
      return (this.gcd(small, big%small));
  }
  // Determines which number passed into the method is isBigger
  // @param num1    The first number
  // @param num2    The second number
  // @return The bigger of the two numbers
  private isBigger(num1, num2)
  {
    if(num1 > num2)
    {
      return true;
    }
    return false;

  }
  // Returns whether or not a number is prime
  // @param num     The number
  // @return true if the number is prime; otherwise,
  //         false
  public isPrime(num)
  {
    return this.helpPrime(num, 2);
  }
  // Recursively determines whether or not a number is prime by dividing it
  // by every number which comes before it and checking to see if the number
  // is or is not divisible by any of them.
  // @param num     The number
  // @param divisor The number which the above parameter will be divided by
  // @return true if the number is prime; otherwise,
  //         false
  private helpPrime(num, divisor)
  {
    if (divisor == num)
    {
      return true;
    }
    if (num ==1|| num < 0)
    {
      return false;
    }
    if(num%divisor == 0)
    {
      return false;
    }
    return this.helpPrime(num, divisor + 1);
  }
  // Returns the factorial of a number
  // @param n   The number
  // @return    The factorial of the number
  public fact(n)
  {
    return this.factHelp(n, 1);
  }
  // Returns the factorial of a given number recursively, while serving as a
  // helper method for the fact(n) method.
  // @param n       The number
  // @param result  The result of the factorial calculation for n-1
  // @return        The factorial of the number n
  private factHelp(n, result)
  {
    if (n==0)
    {
      return result;
    }
    return this.factHelp(n-1, n * result);
  }
  // Returns the fibonnaci number specified by the parameter n.
  // @param n   The index of the number specified in the fibonnaci series
  public fib(n)
  {
    if(n <=2)
    {
      return 1;
      
    }
    return this.fib(n-2) + this.fib(n-1);
  }
  // Returns the approximate integer square root of a given number
  // @param num   The number being square rooted
  // @return      The approximate integer square root of the specified parameter
  public sqrt(num)
  {
    return this.findSqrt(num, 1);
  }
  // Finds the average of two numbers
  // @param num1  The first number
  // @param num2  The second numbers
  // @return      The average of the two numbers
  private average(num1, num2)
  {
    return (num1 + num2) / 2;
  }
  // Determines whether or not the square root has been determined
  // @param guess         The most recent guess
  // @param numByGuess    The quotient of the number being square rooted and
  //                      the most recent guess
  // @return true if numByGuess equals or is within 1 unit of the guess; otherwise,
  //         false
  private isDone(guess, numByGuess)
  {
    if(guess == numByGuess || numByGuess - 1 == guess)
    {
      return true;
    }
    return false;
  }
  // Finds the square root of a number by implementing Newton's method, which
  // makes a series of guesses as to what the square root is by setting it
  // equal to the average of the a guess and the quotient of the number being
  // square rooted and the guess.
  // @param num     The number being square rooted
  // @param guess   The current guess as to what the square root is
  // @return        The approximate integer square root of the specified parameter
  private findSqrt(num, guess)
  {
    numByGuess = (num / guess);
    if(this.isDone(guess, numByGuess))
    {
      return guess;
    }
    if(numByGuess == this.average(guess, numByGuess))
    {
      return numByGuess;
    }
    average = this.average(guess, numByGuess);
    return this.findSqrt(num, average);
  }

}
